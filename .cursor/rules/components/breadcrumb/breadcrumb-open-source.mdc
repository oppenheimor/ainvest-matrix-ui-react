---
description: 
globs: 
alwaysApply: false
---
## Breadcrumb 组件开源资料：

1. shadcn/ui 组件库：

```tsx
// breadcrumb.tsx
import * as React from "react"
import { ChevronRightIcon, MoreHorizontal } from "lucide-react"
import { Slot } from "radix-ui"

import { cn } from "@/registry/default/lib/utils"

function Breadcrumb({ ...props }: React.ComponentProps<"nav">) {
  return <nav aria-label="breadcrumb" data-slot="breadcrumb" {...props} />
}

function BreadcrumbList({ className, ...props }: React.ComponentProps<"ol">) {
  return (
    <ol
      data-slot="breadcrumb-list"
      className={cn(
        "text-muted-foreground flex flex-wrap items-center gap-1.5 text-sm break-words sm:gap-2.5",
        className
      )}
      {...props}
    />
  )
}

function BreadcrumbItem({ className, ...props }: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-item"
      className={cn("inline-flex items-center gap-1.5", className)}
      {...props}
    />
  )
}

function BreadcrumbLink({
  asChild,
  className,
  ...props
}: React.ComponentProps<"a"> & {
  asChild?: boolean
}) {
  const Comp = asChild ? Slot.Root : "a"

  return (
    <Comp
      data-slot="breadcrumb-link"
      className={cn("hover:text-foreground transition-colors", className)}
      {...props}
    />
  )
}

function BreadcrumbPage({ className, ...props }: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-page"
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("text-foreground font-normal", className)}
      {...props}
    />
  )
}

function BreadcrumbSeparator({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) {
  return (
    <li
      data-slot="breadcrumb-separator"
      role="presentation"
      aria-hidden="true"
      className={className}
      {...props}
    >
      {children ?? <ChevronRightIcon size={16} />}
    </li>
  )
}

function BreadcrumbEllipsis({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="breadcrumb-ellipsis"
      role="presentation"
      aria-hidden="true"
      className={cn("flex size-5 items-center justify-center", className)}
      {...props}
    >
      <MoreHorizontal size={16} />
      <span className="sr-only">More</span>
    </span>
  )
}

export {
  Breadcrumb,
  BreadcrumbEllipsis,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
}
```

### 2. HeroUI 组件库 Pagination 组件：

#### 目录：

pagination
└─ src
├─ index.ts
├─ pagination-cursor.tsx
├─ pagination-item.tsx
├─ pagination.tsx
├─ use-pagination-item.ts
└─ use-pagination.ts

#### 各文件具体内容如下：

```ts
// index.ts
import Breadcrumbs from "./breadcrumbs";
import BreadcrumbItem from "./breadcrumb-item";

// export types
export type {BreadcrumbsProps} from "./breadcrumbs";
export type {BreadcrumbItemProps} from "./breadcrumb-item";

// export hooks
export {useBreadcrumbs} from "./use-breadcrumbs";
export {useBreadcrumbItem} from "./use-breadcrumb-item";

// export component
export {Breadcrumbs, BreadcrumbItem};
```

```tsx
// breadcrumb-item.tsx
import type {UseBreadcrumbItemProps} from "./use-breadcrumb-item";

import {forwardRef} from "@heroui/system";

import {useBreadcrumbItem} from "./use-breadcrumb-item";

export interface BreadcrumbItemProps extends UseBreadcrumbItemProps {}

const Breadcrumbs = forwardRef<"li", BreadcrumbItemProps>((props, ref) => {
  const {
    Component,
    WrapperComponent,
    children,
    isLast,
    separator,
    startContent,
    endContent,
    hideSeparator,
    getBaseProps,
    getItemProps,
    getSeparatorProps,
  } = useBreadcrumbItem({
    ...props,
    ref,
  });

  return (
    <WrapperComponent {...getBaseProps()}>
      <Component {...getItemProps()}>
        {startContent}
        {children}
        {endContent}
      </Component>
      {!isLast && !hideSeparator && <span {...getSeparatorProps()}>{separator}</span>}
    </WrapperComponent>
  );
});

Breadcrumbs.displayName = "HeroUI.Breadcrumbs";

export default Breadcrumbs;
```

```tsx
// breadcrumbs.tsx
import type {UseBreadcrumbsProps} from "./use-breadcrumbs";

import {cloneElement, isValidElement, useMemo} from "react";
import {forwardRef} from "@heroui/system";
import {ChevronRightIcon, EllipsisIcon} from "@heroui/shared-icons";
import {warn} from "@heroui/shared-utils";
import {chain} from "@react-aria/utils";

import {useBreadcrumbs} from "./use-breadcrumbs";

export interface BreadcrumbsProps extends UseBreadcrumbsProps {}

const Breadcrumbs = forwardRef<"div", BreadcrumbsProps>((props, ref) => {
  const {
    Component,
    children,
    childCount,
    itemProps,
    separator = <ChevronRightIcon />,
    maxItems,
    itemsBeforeCollapse,
    itemsAfterCollapse,
    isDisabled,
    renderEllipsis,
    getBaseProps,
    getListProps,
    getEllipsisProps,
    getSeparatorProps,
    onAction,
  } = useBreadcrumbs({
    ...props,
    ref,
  });

  const content = useMemo(() => {
    let items = children?.map((child, i) => {
      const isLast = i === childCount - 1;
      const itemKey = child?.key || i;

      return cloneElement(child, {
        ...itemProps,
        isLast,
        separator,
        isDisabled: isDisabled && !isLast,
        isCurrent: isLast || child.props.isCurrent,
        ...child.props,
        key: itemKey,
        onPress: chain(child.props?.onPress, () => onAction?.(itemKey)),
      });
    });

    if (!items) return null;

    if (childCount < maxItems) {
      return items;
    }

    if (itemsBeforeCollapse + itemsAfterCollapse >= childCount) {
      warn(
        `You have provided an invalid combination of props to the Breadcrumbs. itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= itemsCount={${childCount}}`,
        "Breadcrumbs",
      );

      return items;
    }

    const itemsInEllipsis = items.slice(itemsBeforeCollapse, items.length - itemsAfterCollapse);

    if (itemsInEllipsis.length < 1) {
      return items;
    }

    const ellipsisIcon = <EllipsisIcon {...getEllipsisProps()} />;
    const collapsedItem = cloneElement(itemsInEllipsis[0], {
      ...itemsInEllipsis[0].props,
      key: "ellipsis",
      children: ellipsisIcon,
    });

    const ellipsisItem =
      typeof renderEllipsis === "function"
        ? renderEllipsis({
            collapsedItem,
            items: itemsInEllipsis.map((item) => item.props),
            maxItems,
            ellipsisIcon,
            itemsBeforeCollapse,
            itemsAfterCollapse,
            separator: <span {...getSeparatorProps()}>{separator}</span>,
          })
        : collapsedItem;

    return [
      ...items.slice(0, itemsBeforeCollapse),
      isValidElement(ellipsisItem) && cloneElement(ellipsisItem, {key: "ellipsis-item"}),
      ...items.slice(items.length - itemsAfterCollapse, items.length),
    ];
  }, [
    children,
    childCount,
    separator,
    itemProps,
    itemsBeforeCollapse,
    itemsAfterCollapse,
    isDisabled,
  ]);

  return (
    <Component {...getBaseProps()}>
      <ol {...getListProps()}>{content}</ol>
    </Component>
  );
});

Breadcrumbs.displayName = "HeroUI.Breadcrumbs";

export default Breadcrumbs;
```

```ts
// use-breadcrumb-item.ts
import type {BreadcrumbItemVariantProps, SlotsToClasses, BreadcrumbItemSlots} from "@heroui/theme";
import type {ReactNode} from "react";
import type {BreadcrumbItemProps as AriaBreadcrumbItemProps} from "@react-types/breadcrumbs";
import type {HTMLHeroUIProps, PropGetter} from "@heroui/system";
import type {ReactRef} from "@heroui/react-utils";

import {mapPropsVariants} from "@heroui/system";
import {useFocusRing} from "@react-aria/focus";
import {breadcrumbItem} from "@heroui/theme";
import {filterDOMProps, useDOMRef} from "@heroui/react-utils";
import {useBreadcrumbItem as useAriaBreadcrumbItem} from "@react-aria/breadcrumbs";
import {clsx, dataAttr, objectToDeps} from "@heroui/shared-utils";
import {useMemo} from "react";
import {mergeProps} from "@react-aria/utils";

interface Props
  extends Omit<HTMLHeroUIProps<"li">, keyof AriaBreadcrumbItemProps>,
    AriaBreadcrumbItemProps {
  /**
   * Ref to the DOM node.
   */
  ref?: ReactRef<HTMLLIElement | null>;
  /**
   * The item custom separator. It is a chevron by default.
   */
  separator?: ReactNode;
  /**
   * Whether the item is the last one.
   * @default false
   */
  isLast?: boolean;
  /**
   * Whether to hide the separator element.
   * @default false
   */
  hideSeparator?: boolean;
  /**
   * The start content of the item.
   */
  startContent?: ReactNode;
  /**
   * The end content of the item.
   */
  endContent?: ReactNode;
  /**
   * The breadcrumbs item classNames.
   */
  classNames?: SlotsToClasses<BreadcrumbItemSlots>;
}

export type UseBreadcrumbItemProps = Props & BreadcrumbItemVariantProps;

export function useBreadcrumbItem(originalProps: UseBreadcrumbItemProps) {
  const [props, variantProps] = mapPropsVariants(originalProps, breadcrumbItem.variantKeys);

  const {
    ref,
    as,
    className,
    children,
    isLast,
    separator,
    startContent,
    endContent,
    classNames,
    hideSeparator = false,
    ...otherProps
  } = props;

  const WrapperComponent = as || "li";

  const isCurrent = !!originalProps?.isCurrent;
  const isDisabled = originalProps?.isDisabled;

  const Component = originalProps?.href && !isCurrent ? "a" : "span";
  const shouldFilterDOMProps = typeof Component === "string";

  const domRef = useDOMRef(ref);

  const {itemProps} = useAriaBreadcrumbItem(
    {...originalProps, isCurrent, elementType: Component},
    domRef,
  );
  const {isFocusVisible, isFocused, focusProps} = useFocusRing();

  const slots = useMemo(
    () =>
      breadcrumbItem({
        ...variantProps,
        isCurrent,
        underline:
          originalProps?.underline !== undefined && !isCurrent ? originalProps?.underline : "none",
        className,
      }),
    [objectToDeps(variantProps), isCurrent, className],
  );

  const baseStyles = clsx(classNames?.base, className);

  const getBaseProps = () => ({
    ref: domRef,
    "data-slot": "base",
    className: slots.base({class: baseStyles}),
    ...filterDOMProps(otherProps, {
      enabled: shouldFilterDOMProps,
    }),
  });

  const getItemProps: PropGetter = () => ({
    href: !isCurrent ? originalProps?.href : undefined,
    "data-slot": "item",
    "data-focus": dataAttr(isFocused),
    "data-focus-visible": dataAttr(isFocusVisible),
    "data-disabled": originalProps?.isDisabled,
    "data-current": originalProps?.isCurrent,
    className: slots.item({class: classNames?.item}),
    ...mergeProps(itemProps, isDisabled ? {} : focusProps),
  });

  const getSeparatorProps = () => ({
    "data-slot": "separator",
    "aria-hidden": dataAttr(true),
    className: slots.separator({class: classNames?.separator}),
  });

  return {
    Component,
    WrapperComponent,
    children,
    separator,
    startContent,
    endContent,
    isDisabled,
    isCurrent,
    isLast,
    hideSeparator,
    getBaseProps,
    getItemProps,
    getSeparatorProps,
  };
}

export type UseBreadcrumbItemReturn = ReturnType<typeof useBreadcrumbItem>;
```

```ts
// use-breadcrumbs.ts
import type {BreadcrumbsVariantProps, SlotsToClasses, BreadcrumbsSlots} from "@heroui/theme";
import type {AriaBreadcrumbsProps} from "@react-types/breadcrumbs";
import type {ReactNode, Key, ReactElement} from "react";
import type {HTMLHeroUIProps, PropGetter} from "@heroui/system";
import type {ReactRef} from "@heroui/react-utils";
import type {BreadcrumbItemProps} from "./breadcrumb-item";

import {Children} from "react";
import {mapPropsVariants, useProviderContext} from "@heroui/system";
import {breadcrumbs} from "@heroui/theme";
import {filterDOMProps, pickChildren, useDOMRef} from "@heroui/react-utils";
import {mergeProps} from "@react-aria/utils";
import {useBreadcrumbs as useAriaBreadcrumbs} from "@react-aria/breadcrumbs";
import {useMemo} from "react";
import {clsx, dataAttr, objectToDeps} from "@heroui/shared-utils";

import BreadcrumbItem from "./breadcrumb-item";

type RenderEllipsisItemProps = {
  /**
   * The collapsed items.
   */
  items: BreadcrumbItemProps[];
  /**
   * The max number of items.
   */
  maxItems: number;
  /**
   * The picked item to render the ellipsis.
   */
  collapsedItem: ReactNode;
  /**
   * The default ellipsis icon.
   */
  ellipsisIcon: ReactNode;
  /**
   * Number of items to show before the ellipsis.
   */
  itemsBeforeCollapse: number;
  /**
   * Number of items to show after the ellipsis.
   */
  itemsAfterCollapse: number;
  /**
   * The separator between each breadcrumb. It is a chevron by default.
   */
  separator: ReactNode;
};

interface Props extends HTMLHeroUIProps<"nav">, AriaBreadcrumbsProps {
  /**
   * Ref to the DOM node.
   */
  ref?: ReactRef<HTMLElement | null>;
  /**
   * If max items is exceeded, the number of items to show before the ellipsis.
   * @default 1
   */
  itemsBeforeCollapse?: number;
  /**
   * If max items is exceeded, the number of items to show after the ellipsis.
   * @default 2
   */
  itemsAfterCollapse?: number;
  /**
   * Specifies the maximum number of breadcrumbs to display. When there are more
   * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
   * will be shown, with an ellipsis in between.
   * @default 8
   */
  maxItems?: number;
  /**
   * The separator between each breadcrumb. It is a chevron by default.
   */
  separator?: ReactNode;
  /**
   * Breadcrumbs in a disabled state shows items, but indicates that navigation is
   * not available. This can be used to maintain layout continuity.
   * @default false
   */
  isDisabled?: boolean;
  /**
   * The breadcrumbs classNames.
   */
  classNames?: SlotsToClasses<BreadcrumbsSlots>;
  /**
   * The breadcrumbs items classNames.
   */
  itemClasses?: BreadcrumbItemProps["classNames"];
  /**
   * A function that allows to render the ellipsis when the number of items is exceeded.
   *
   * @param props RenderEllipsisItemProps
   */
  renderEllipsis?: (props: RenderEllipsisItemProps) => ReactNode;
  /**
   * Callback when any of the breadcrumbs is pressed.
   * @param key string
   */
  onAction?: (key: Key) => void;
}

export type UseBreadcrumbsProps = Props &
  BreadcrumbsVariantProps &
  Partial<
    Pick<BreadcrumbItemProps, "color" | "size" | "underline" | "hideSeparator" | "disableAnimation">
  >;

export function useBreadcrumbs(originalProps: UseBreadcrumbsProps) {
  const globalContext = useProviderContext();

  const disableAnimation =
    originalProps?.disableAnimation ?? globalContext?.disableAnimation ?? false;

  const [props, variantProps] = mapPropsVariants(originalProps, breadcrumbs.variantKeys);

  const {
    ref,
    as,
    color,
    underline,
    isDisabled,
    separator,
    children: childrenProp,
    itemsBeforeCollapse = 1,
    itemsAfterCollapse = 2,
    maxItems = 8,
    hideSeparator,
    renderEllipsis,
    className,
    classNames,
    itemClasses,
    onAction,
    ...otherProps
  } = props;

  const Component = as || "nav";
  const shouldFilterDOMProps = typeof Component === "string";

  const {navProps} = useAriaBreadcrumbs(originalProps);

  const [, children] = pickChildren<ReactElement>(childrenProp as ReactElement, BreadcrumbItem);

  const childCount = Children.count(children);

  const domRef = useDOMRef(ref);

  const slots = useMemo(
    () =>
      breadcrumbs({
        ...variantProps,
      }),
    [objectToDeps(variantProps)],
  );

  const baseStyles = clsx(classNames?.base, className);

  const itemProps: Partial<BreadcrumbItemProps> = {
    color,
    underline,
    disableAnimation,
    hideSeparator,
    size: originalProps?.size,
    classNames: itemClasses,
  };

  const getBaseProps: PropGetter = () => ({
    ref: domRef,
    "data-slot": "base",
    className: slots.base({class: baseStyles}),
    ...mergeProps(
      navProps,
      filterDOMProps(otherProps, {
        enabled: shouldFilterDOMProps,
      }),
    ),
  });

  const getListProps = () => ({
    "data-slot": "list",
    className: slots.list({class: classNames?.list}),
  });

  const getEllipsisProps = () => ({
    "data-slot": "ellipsis",
    className: slots.ellipsis({class: classNames?.ellipsis}),
  });

  const getSeparatorProps = () => ({
    "data-slot": "separator",
    "aria-hidden": dataAttr(true),
    className: slots.separator({class: classNames?.separator}),
  });

  return {
    Component,
    children,
    slots,
    separator,
    childCount,
    itemsAfterCollapse,
    itemsBeforeCollapse,
    maxItems,
    classNames,
    isDisabled,
    itemProps,
    renderEllipsis,
    getBaseProps,
    getListProps,
    getEllipsisProps,
    getSeparatorProps,
    onAction,
  };
}

export type UseBreadcrumbsReturn = ReturnType<typeof useBreadcrumbs>;
```

### 3. Origin UI Demos

```tsx
// Demo01

import {
  Breadcrumb,
  BreadcrumbEllipsis,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Home</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <DropdownMenu>
            <DropdownMenuTrigger className="hover:text-foreground">
              <BreadcrumbEllipsis />
              <span className="sr-only">Toggle menu</span>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuItem asChild>
                <a href="#">Documentation</a>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <a href="#">Themes</a>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <a href="#">GitHub</a>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
``` 

```tsx
// Demo02
import { FoldersIcon } from "lucide-react"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Home</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <DropdownMenu>
            <DropdownMenuTrigger className="hover:text-foreground">
              <span
                role="presentation"
                aria-hidden="true"
                className="flex size-5 items-center justify-center"
              >
                <FoldersIcon size={16} />
              </span>
              <span className="sr-only">Toggle menu</span>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start">
              <DropdownMenuItem asChild>
                <a href="#">Documentation</a>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <a href="#">Themes</a>
              </DropdownMenuItem>
              <DropdownMenuItem asChild>
                <a href="#">GitHub</a>
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
```

```tsx
import { HomeIcon } from "lucide-react"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">
            <HomeIcon size={16} aria-hidden="true" />
            <span className="sr-only">Home</span>
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
```

```tsx
// Demo04
import { ComponentIcon, HomeIcon } from "lucide-react"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#" className="inline-flex items-center gap-1.5">
            <HomeIcon size={16} aria-hidden="true" />
            Home
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbLink href="#" className="inline-flex items-center gap-1.5">
            <ComponentIcon size={16} aria-hidden="true" />
            Components
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator />
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
```

```tsx
// Demo05
import { HomeIcon } from "lucide-react"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">
            <HomeIcon size={16} aria-hidden="true" />
            <span className="sr-only">Home</span>
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator> / </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator> / </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
```

```tsx
// Demp06
import { HomeIcon } from "lucide-react"

import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb"

export default function Component() {
  return (
    <Breadcrumb>
      <BreadcrumbList>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">
            <HomeIcon size={16} aria-hidden="true" />
            <span className="sr-only">Home</span>
          </BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator> · </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbLink href="#">Components</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbSeparator> · </BreadcrumbSeparator>
        <BreadcrumbItem>
          <BreadcrumbPage>Breadcrumb</BreadcrumbPage>
        </BreadcrumbItem>
      </BreadcrumbList>
    </Breadcrumb>
  )
}
```